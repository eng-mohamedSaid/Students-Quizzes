# Prompt لتطوير منصة "اختبر تلاميذك"

## 🎯 نظرة عامة على المشروع
- **اسم المشروع**: منصة اختبر تلاميذك
- **النوع**: منصة تعليمية أوفلاين (Single Page Application - SPA)
- **الهدف**: تمكين المعلمين من إنشاء وإجراء اختبارات تفاعلية للطلاب مع حفظ البيانات محليًا باستخدام LocalStorage.
- **التقنيات المستخدمة**:
  - Vue 3 (Composition API)
  -  CSS للتصميم
  - LocalStorage لتخزين البيانات
  - لا يوجد باك إند (كل شيء يعمل أوفلاين)
- **الجمهور المستهدف**:
  - معلمو القرآن الكريم
  - معلمو اللغة العربية
  - معلمو الرياضيات
  - معلمو العلوم
  - أي معلم يريد اختبارات تفاعلية

## ✨ الميزات الأساسية

### 🔧 الميزات الوظيفية

#### 1. الصفحة الرئيسية (Home)
- **الغرض**: تقديم المنصة وتوجيه المعلم للبدء.
- **المحتوى**:
  - هيدر يحتوي على اسم المنصة: **"اختبر تلاميذك"**.
  - وصف قصير:  
    *"منصة أوفلاين تساعد المعلم على إنشاء اختبارات تفاعلية للطلاب وحفظها محليًا باستخدام LocalStorage."*
  - قسم **كيفية الاستخدام** يحتوي على خطوات بسيطة:
    1. إنشاء اختبار جديد في صفحة الإنشاء.
    2. إضافة الأسئلة والإجابات.
    3. حفظ الاختبار.
    4. بدء الاختبار من صفحة الاختبارات.
  - زر واضح: **"سجل اختبار جديد"** ينقل إلى صفحة إنشاء الاختبار.

#### 2. صفحة إنشاء اختبار جديد (Create Quiz)
- **الغرض**: إنشاء اختبار جديد وحفظه في LocalStorage.
- **الحقول**:
  - **عنوان الاختبار**: حقل نصي لإدخال اسم الاختبار (مطلوب).
  - **وصف الاختبار**: حقل نصي متعدد الأسطر لوصف قصير (اختياري).
  - **نموذج إضافة سؤال**:
    - حقل نصي للسؤال.
    - 4 حقول نصية للإجابات مع زر اختيار لتحديد الإجابة الصحيحة (radio button).
    - زر **"إضافة سؤال"** لإضافة السؤال إلى القائمة.
  - **قائمة الأسئلة**:
    - عرض الأسئلة المضافة مع خيارات **تعديل** و**حذف** لكل سؤال.
  - **أزرار التحكم**:
    - زر **"حفظ الاختبار"**: يحفظ الاختبار في LocalStorage.
    - زر **"إلغاء"**: يعيد المستخدم إلى الصفحة الرئيسية.

#### 3. صفحة عرض الاختبارات (Quizzes List)
- **الغرض**: عرض جميع الاختبارات المحفوظة.
- **المحتوى**:
  - قائمة الاختبارات في شكل بطاقات (cards)، كل بطاقة تحتوي:
    - عنوان الاختبار.
    - وصف الاختبار (إن وجد).
    - زر **"تعديل الاختبار"**: ينقل إلى صفحة تعديل الاختبار (نفس واجهة الإنشاء مع بيانات محملة).
    - زر **"بدء الاختبار"**: ينقل إلى صفحة الاختبار.
  - زر **"سجل اختبار جديد"**: ينقل إلى صفحة إنشاء اختبار.
- **البيانات**: يتم استرجاع الاختبارات من LocalStorage.

#### 4. صفحة الاختبار (Start Quiz)
- **الغرض**: عرض الاختبار للطلاب بطرق تفاعلية.
- **أوضاع العرض**:
  1. **الوضع القياسي (Standard Mode)**:
     - عرض الأسئلة واحدًا تلو الآخر.
     - مؤقت لكل سؤال (60 ثانية).
     - بعد اختيار الإجابة، يظهر ما إذا كانت صحيحة (باللون الأخضر) أو خاطئة (باللون الأحمر) مع إظهار الإجابة الصحيحة.
     - عرض رقم السؤال الحالي وعدد الأسئلة الكلي (مثل: 1/10).
     - أزرار **السؤال التالي** و**السؤال السابق** (إذا لزم الأمر).
     - في النهاية، يظهر ملخص النتائج (عدد الأسئلة، الإجابات الصحيحة/الخاطئة، النسبة المئوية).
  2. **وضع العجلة الدوارة (Spinner Mode)**:
     - عرض الأسئلة في دائرة (عجلة دوارة).
     - زر في المنتصف لتدوير العجلة، تتوقف عشوائيًا على سؤال.
     - بعد اختيار الإجابة، يظهر ما إذا كانت صحيحة أو خاطئة مع الإجابة الصحيحة.
     - إمكانية إعادة الدوران للسؤال التالي.
     - في النهاية، يظهر ملخص النتائج.
  3. **وضع تفاعلي إضافي (اقتراح)**:
     - عرض الأسئلة كبطاقات (Flipping Cards) مع تأثيرات تحريك جذابة.
     - عند النقر على البطاقة، تنقلب لتظهر الإجابات.
     - بعد اختيار الإجابة، يظهر ما إذا كانت صحيحة أو خاطئة.
- **النتائج**:
  - عرض إحصائيات مفصلة: عدد الأسئلة، الإجابات الصحيحة/الخاطئة، النسبة المئوية.
  - تصنيف الدرجات (مثل: ممتاز ≥ 90%، جيد جدًا 80-89%، جيد 70-79%، مقبول <70%).
  - خيار مراجعة الإجابات الصحيحة والخاطئة.
  - زر **"إعادة الاختبار"** أو **"العودة للصفحة الرئيسية"**.

#### 5. حفظ واسترجاع البيانات
- تخزين جميع الاختبارات في LocalStorage بصيغة JSON.
- استرجاع الاختبارات عند تحميل الصفحة.
- تنظيف البيانات إذا لزم الأمر (خيار اختياري لحذف اختبار).

### 🎨 الميزات التصميمية
- **تصميم متجاوب**: يعمل على الهواتف، الأجهزة اللوحية، وأجهزة الكمبيوتر.
- **واجهة سهلة الاستخدام**:
  - تصميم بديهي للمعلمين مع أزرار واضحة وحقول مرتبة.
  - نصوص باللغة العربية مع خط واضح (مثل: Cairo أو Noto Sans Arabic).
- **تجربة تفاعلية**:
  - تأثيرات بصرية (مثل: تحريك البطاقات، دوران العجلة).
  - مؤقت متحرك في وضع الاختبار.
  - ردود فعل فورية عند اختيار الإجابات (ألوان، رسائل).
- **الألوان**:
  - أزرق هادئ (#1E3A8A, #3B82F6).
  - أبيض (#FFFFFF) للخلفيات.
  - رمادي فاتح (#F3F4F6) للعناصر الثانوية.
  - أخضر (#10B981) للإجابات الصحيحة.
  - أحمر (#EF4444) للإجابات الخاطئة.
- **تأثيرات بصرية**:
  - تأثيرات انتقال ناعمة بين الصفحات (Vue transitions).
  - تأثير دوران للعجلة الدوارة.
  - تأثير قلب للبطاقات في وضع Flipping Cards.

## 📋 متطلبات التطوير
1. **إعداد المشروع**:
   - استخدم Vue 3 (Composition API) مع Vite كأداة بناء.
   - استخدم css واعمل root به كل التصاميم المتشابهه
   - استخدم خطوط عربية (مثل Cairo أو Noto Sans Arabic) عبر Google Fonts.

2. **الهيكلية**:
   - **المكونات (Components)**:
     - `Home.vue`: الصفحة الرئيسية.
     - `CreateQuiz.vue`: صفحة إنشاء وتعديل الاختبار.
     - `QuizList.vue`: صفحة عرض الاختبارات.
     - `StartQuiz.vue`: صفحة الاختبار مع أوضاع العرض المختلفة.
     - `Spinner.vue`: مكون للعجلة الدوارة.
     - `FlippingCard.vue`: مكون لبطاقات الأسئلة.
     - `QuizResult.vue`: مكون لعرض النتائج.
   - **التوجيه (Routing)**:
     - استخدم `vue-router` للتنقل بين الصفحات.
     - المسارات:
       - `/`: الصفحة الرئيسية.
       - `/create`: إنشاء/تعديل اختبار.
       - `/quizzes`: قائمة الاختبارات.
       - `/quiz/:id`: بدء الاختبار بمعرف الاختبار.

3. **إدارة البيانات**:
   - استخدم `reactive` أو `ref` في Vue 3 لإدارة حالة الاختبارات.
   - احفظ الاختبارات في LocalStorage بصيغة:
     ```json
     [
       {
         id: "uuid",
         title: "عنوان الاختبار",
         description: "وصف الاختبار",
         questions: [
           {
             text: "نص السؤال",
             answers: ["إجابة 1", "إجابة 2", "إجابة 3", "إجابة 4"],
             correctAnswer: "إجابة 1"
           }
         ]
       }
     ]
     ```
   - قم بتحميل البيانات من LocalStorage عند بدء التطبيق.

4. **الوظائف الأساسية**:
   - **إنشاء اختبار**: إضافة/تعديل/حذف أسئلة مع التحقق من صحة البيانات (عنوان مطلوب، إجابة صحيحة واحدة).
   - **حفظ/استرجاع**: استخدم `localStorage.setItem` و`localStorage.getItem` لحفظ واسترجاع الاختبارات.
   - **أوضاع الاختبار**:
     - **الوضع القياسي**: عرض الأسئلة بشكل تسلسلي مع مؤقت (استخدم `setInterval`).
     - **العجلة الدوارة**: استخدم CSS animations لتدوير العجلة واختيار سؤال عشوائي.
     - **البطاقات**: استخدم CSS `transform: rotateY` لتأثير القلب.
   - **النتائج**: احسب النسبة المئوية وصنف الدرجات بناءً على النطاقات المحددة.

5. **التصميم**:
   - استخدم root of css لتطبيق الألوان والتصميم المتجاوب.
   - أضف تأثيرات انتقال باستخدام Vue `<Transition>` للتنقل بين الصفحات والأسئلة.
   - تأكد من دعم اللغة العربية (اتجاه النص: RTL، خطوط عربية).

## 📌 ملاحظات إضافية
- **الأداء**: تأكد من تحسين تحميل البيانات من LocalStorage لتجنب التأخير.
- **التجربة التفاعلية**: أضف رسائل توضيحية (مثل: "إجابة صحيحة!" أو "حاول مرة أخرى") مع ألوان واضحة.
- **إمكانية الوصول**: استخدم سمات ARIA لتحسين الوصول للمعلمين والطلاب ذوي الإعاقة.
- **الأمان**: تحقق من صحة المدخلات لتجنب أخطاء JSON في LocalStorage.
- **اختبارات الوحدة**: أضف اختبارات باستخدام Vitest (اختياري) لضمان استقرار الوظائف.

## 🛠️ التسليمات المتوقعة
1. ملفات المشروع:
   - `src/components/*.vue`: مكونات Vue لكل جزء.
   - `src/App.vue`: المكون الرئيسي.
   - `src/router/index.js`: إعداد التوجيه.
   - `index.html`: ملف HTML أساسي.
   - `src/assets/*`: ملفات CSS مخصصة (إذا لزم الأمر).
2. توثيق بسيط لكيفية تشغيل التطبيق.
3. تطبيق يعمل أوفلاين بالكامل مع تخزين البيانات في LocalStorage.

## ⏰ الجدول الزمني (اقتراحي)
- **الأسبوع 1**: إعداد المشروع، تصميم الصفحة الرئيسية وصفحة إنشاء الاختبار.
- **الأسبوع 2**: تطوير صفحة الاختبارات ووضع الاختبار القياسي.
- **الأسبوع 3**: إضافة العجلة الدوارة ووضع البطاقات.
- **الأسبوع 4**: إنهاء النتائج، التصميم المتجاوب، واختبار التطبيق.

## 📈 معايير النجاح
- التطبيق يعمل أوفلاين بالكامل.
- الاختبارات تُحفظ وتُسترجع من LocalStorage بنجاح.
- الواجهة متجاوبة وسهلة الاستخدام.
- أوضاع العرض التفاعلية (القياسي، العجلة، البطاقات) تعمل كما هو متوقع.
- النتائج دقيقة مع تصنيف واضح للدرجات.